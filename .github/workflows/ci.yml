name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.1.0"

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Run ruff linting
        run: |
          uv run ruff check . --output-format=github

      - name: Run ruff formatting check
        run: |
          uv run ruff format --check .

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Run mypy type checking
        run: |
          uv run mypy src/ --strict --show-error-codes

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Wait for Redis
        run: |
          timeout 30 bash -c 'until redis-cli ping; do sleep 1; done'

      - name: Run unit tests
        env:
          TEST_REDIS_URL: redis://localhost:6379/15
          ENVIRONMENT: test
        run: |
          uv run pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Run integration tests
        env:
          TEST_REDIS_URL: redis://localhost:6379/15
          ENVIRONMENT: test
        run: |
          uv run pytest tests/integration/ -v --cov=src --cov-append --cov-report=xml --cov-report=term

      - name: Check coverage threshold
        run: |
          uv run coverage report --fail-under=85

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Run bandit security scan
        run: |
          uv pip install bandit[toml]
          uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Run safety check (dependency vulnerabilities)
        run: |
          uv pip install safety
          uv run safety check --json || true

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync

      - name: Test server startup (memory backend)
        env:
          CACHE_BACKEND: memory
          ENVIRONMENT: test
        run: |
          timeout 10 uv run python -c "
          import asyncio
          from src.server import initialize_server, cleanup_server

          async def test():
              await initialize_server()
              print('✓ Server initialized successfully with memory backend')
              await cleanup_server()
              print('✓ Server cleanup successful')

          asyncio.run(test())
          "

      - name: Test server startup (Redis backend)
        env:
          CACHE_BACKEND: redis
          REDIS_URL: redis://localhost:6379/15
          ENVIRONMENT: test
        run: |
          timeout 10 uv run python -c "
          import asyncio
          from src.server import initialize_server, cleanup_server

          async def test():
              await initialize_server()
              print('✓ Server initialized successfully with Redis backend')
              await cleanup_server()
              print('✓ Server cleanup successful')

          asyncio.run(test())
          "

      - name: Test cache operations
        env:
          CACHE_BACKEND: redis
          REDIS_URL: redis://localhost:6379/15
          ENVIRONMENT: test
        run: |
          uv run python -c "
          import asyncio
          from src.cache import create_cache, close_all_caches

          async def test():
              cache = create_cache()

              # Test set
              await cache.set('smoke_test', {'data': 'value'})
              print('✓ Cache set successful')

              # Test get
              value = await cache.get('smoke_test')
              assert value == {'data': 'value'}
              print('✓ Cache get successful')

              # Test delete
              deleted = await cache.delete('smoke_test')
              assert deleted
              print('✓ Cache delete successful')

              # Test stats
              stats = await cache.get_stats()
              assert stats['backend'] == 'redis'
              print('✓ Cache stats successful')

              await close_all_caches()
              print('✓ All cache smoke tests passed')

          asyncio.run(test())
          "

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  sdd-compliance:
    name: SDD Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check SDD.md exists
        run: |
          if [ ! -f "docs/SDD.md" ]; then
            echo "❌ SDD.md not found"
            exit 1
          fi
          echo "✓ SDD.md exists"

      - name: Check PLUGIN_GUIDE.md exists
        run: |
          if [ ! -f "docs/PLUGIN_GUIDE.md" ]; then
            echo "❌ PLUGIN_GUIDE.md not found"
            exit 1
          fi
          echo "✓ PLUGIN_GUIDE.md exists"

      - name: Verify core structure
        run: |
          required_files=(
            "src/server.py"
            "src/cache/factory.py"
            "src/cache/interface.py"
            "src/cache/backends/memory.py"
            "src/cache/backends/redis.py"
            "src/config/schemas.py"
            "src/config/loader.py"
            "src/observability/monitoring.py"
            "src/errors.py"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
          done
          echo "✓ All required core files exist"

      - name: Check test structure
        run: |
          if [ ! -d "tests/unit" ] || [ ! -d "tests/integration" ]; then
            echo "❌ Test structure incomplete"
            exit 1
          fi
          echo "✓ Test structure compliant"

      - name: Verify no HTTP in core
        run: |
          if grep -r "from fastapi import" src/ --exclude-dir=__pycache__; then
            echo "❌ FastAPI imports found in core (SDD violation)"
            exit 1
          fi
          if grep -r "from flask import" src/ --exclude-dir=__pycache__; then
            echo "❌ Flask imports found in core (SDD violation)"
            exit 1
          fi
          echo "✓ No HTTP framework imports in core"

  all-checks-pass:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, security, smoke-test, build, sdd-compliance]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Lint check failed"
            exit 1
          fi
          if [ "${{ needs.type-check.result }}" != "success" ]; then
            echo "❌ Type check failed"
            exit 1
          fi
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          if [ "${{ needs.smoke-test.result }}" != "success" ]; then
            echo "❌ Smoke tests failed"
            exit 1
          fi
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Build failed"
            exit 1
          fi
          if [ "${{ needs.sdd-compliance.result }}" != "success" ]; then
            echo "❌ SDD compliance check failed"
            exit 1
          fi
          echo "✅ All CI checks passed!"
