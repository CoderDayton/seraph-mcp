[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "seraph-mcp"
version = "1.0.0"
description = "Comprehensive AI Optimization Platform - Token optimization, model routing, semantic caching, and cost management for LLM APIs"
readme = "README.md"
authors = [
    {name = "Seraph Team", email = "team@seraph-mcp.dev"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"

# All dependencies included in main package (monolithic architecture)
dependencies = [
    # Core MCP server and configuration
    "fastmcp>=2.0.0",           # MCP stdio server
    "pydantic>=2.0.0",          # Typed configuration and validation
    "pydantic-settings>=2.0.0", # Settings management
    "python-dotenv>=1.0.0",     # Environment variables
    "httpx>=0.25.0",            # HTTP client for Models.dev API

    # Cache and storage
    "redis>=5.0.0",             # Redis backend for caching

    # AI Model Providers (all included)
    "openai>=1.0.0",            # OpenAI GPT models
    "anthropic>=0.25.0",        # Anthropic Claude models
    "google-genai>=0.2.0",      # Google Gemini models (newer SDK)

    # Token optimization
    "tiktoken>=0.5.0",          # OpenAI token counting
]

[project.optional-dependencies]
# Semantic cache dependencies (optional - needed for semantic caching feature)
semantic_cache = [
    "sentence-transformers>=2.0.0",  # Local embedding models
    "chromadb>=0.4.0",               # Vector database for similarity search
]

# Development dependencies
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.0.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "types-redis>=4.6.0",
    "bandit[toml]>=1.7.0",
    "safety>=3.0.0",
    "pre-commit>=3.5.0",
]

# All optional features (for convenience)
all = [
    "sentence-transformers>=2.0.0",  # Semantic cache
    "chromadb>=0.4.0",               # Semantic cache
]

[project.urls]
Homepage = "https://github.com/seraph-mcp/seraph-mcp"
Repository = "https://github.com/seraph-mcp/seraph-mcp"
Documentation = "https://seraph-mcp.readthedocs.io"
Issues = "https://github.com/seraph-mcp/seraph-mcp/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "B", "C90", "UP"]
ignore = ["E501", "B008"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 85

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "env"]
skips = ["B101", "B601"]
