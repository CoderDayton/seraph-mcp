# Production Docker Compose configuration for Seraph MCP
# SDD-compliant: stdio MCP protocol with Redis backend
# Note: This provides infrastructure (Redis). MCP server runs via fastmcp CLI.

version: "3.8"

services:
    # Seraph MCP Server (stdio MCP protocol)
    seraph-mcp:
        build:
            context: .
            dockerfile: Dockerfile
        image: seraph-mcp:latest
        container_name: seraph-mcp-prod
        restart: unless-stopped
        environment:
            # Core Configuration
            - ENVIRONMENT=production
            - LOG_LEVEL=WARNING

            # Cache Configuration (Redis backend for production)
            - CACHE_BACKEND=redis
            - CACHE_NAMESPACE=seraph
            - CACHE_TTL_SECONDS=3600
            - CACHE_MAX_SIZE=10000

            # Redis connection (points to redis-stack service)
            - REDIS_URL=redis://redis-stack:6379/0
            - REDIS_MAX_CONNECTIONS=50
            - REDIS_SOCKET_TIMEOUT=5

            # Observability
            - OBSERVABILITY_BACKEND=prometheus
            - ENABLE_METRICS=true
            - ENABLE_TRACING=true
            - METRICS_PORT=9090
            - PROMETHEUS_PATH=/metrics

            # Optimization (plugin-provided)
            - ENABLE_OPTIMIZATION=true
            - OPTIMIZATION_MODE=balanced
            - QUALITY_THRESHOLD=0.90
            - MAX_OVERHEAD_MS=100.0

            # Budget enforcement (plugin-provided)
            - ENABLE_BUDGET_ENFORCEMENT=true
            - MONTHLY_BUDGET_LIMIT=1000.0
            - BUDGET_ALERT_THRESHOLDS=0.5,0.75,0.9

            # Security
            - ENABLE_AUTH=false
            - ALLOWED_HOSTS=*
        volumes:
            - ./logs:/app/logs
            - ./data:/app/data
        depends_on:
            redis-stack:
                condition: service_healthy
        networks:
            - seraph-network
        command: ["fastmcp", "run", "prod.fastmcp.json", "--project", "./"]
        deploy:
            resources:
                limits:
                    cpus: "2.0"
                    memory: 2G
                reservations:
                    cpus: "0.5"
                    memory: 512M
            restart_policy:
                condition: on-failure
                delay: 5s
                max_attempts: 3
                window: 120s

    # Redis Stack for cache backend
    redis-stack:
        image: redis/redis-stack-server:latest
        container_name: seraph-redis-prod
        restart: unless-stopped
        ports:
            - "6379:6379"
        environment:
            - REDIS_ARGS=--appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
        volumes:
            - redis_data:/data
        networks:
            - seraph-network
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s
        deploy:
            resources:
                limits:
                    cpus: "2.0"
                    memory: 2G
                reservations:
                    cpus: "0.5"
                    memory: 512M

    # RedisInsight for Redis management (optional)
    redisinsight:
        image: redis/redisinsight:latest
        container_name: seraph-redisinsight-prod
        restart: unless-stopped
        ports:
            - "8001:8001"
        depends_on:
            - redis-stack
        networks:
            - seraph-network
        environment:
            - REDIS_HOST=redis-stack
            - REDIS_PORT=6379

    # Prometheus for metrics collection (optional - requires observability plugin)
    prometheus:
        image: prom/prometheus:latest
        container_name: seraph-prometheus-prod
        restart: unless-stopped
        ports:
            - "9091:9090"
        volumes:
            - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
            - prometheus_data:/prometheus
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--storage.tsdb.retention.time=30d"
            - "--web.enable-lifecycle"
        networks:
            - seraph-network

    # Grafana for dashboards (optional)
    grafana:
        image: grafana/grafana:latest
        container_name: seraph-grafana-prod
        restart: unless-stopped
        ports:
            - "3000:3000"
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
            - GF_USERS_ALLOW_SIGN_UP=false
        volumes:
            - grafana_data:/var/lib/grafana
        depends_on:
            - prometheus
        networks:
            - seraph-network

networks:
    seraph-network:
        driver: bridge

volumes:
    redis_data:
        driver: local
    prometheus_data:
        driver: local
    grafana_data:
        driver: local
