# ============================================================================
# Seraph MCP — Environment Configuration (Example)
# ============================================================================
# Copy this file to .env and customize with your values.
#
# This file follows the SDD.md canonical configuration specification.
# See docs/SDD.md for detailed documentation on all settings.
#
# Quick Start:
#   1. Copy: cp .env.example .env
#   2. Set ENVIRONMENT (development|staging|production)
#   3. Choose CACHE_BACKEND (memory|redis)
#   4. If redis: Set REDIS_URL
#   5. Start: fastmcp dev src/server.py
# ============================================================================

# ============================================================================
# CORE CONFIGURATION
# ============================================================================

# Runtime environment: development, staging, production
# - development: verbose logging, relaxed validation
# - staging: production-like with extra debugging
# - production: strict validation, minimal logging, security enforced
ENVIRONMENT=development

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# ============================================================================
# CACHE CONFIGURATION (Core Feature)
# ============================================================================
# Cache backend selection: memory | redis
# - memory: In-process LRU cache (default, zero dependencies)
# - redis: Redis-backed cache (requires REDIS_URL)
CACHE_BACKEND=memory

# Cache namespace: prefix for all cache keys
CACHE_NAMESPACE=seraph

# Default TTL in seconds (0 = no expiry)
CACHE_TTL_SECONDS=3600

# Memory backend settings (only applies when CACHE_BACKEND=memory)
# Maximum number of entries before LRU eviction
CACHE_MAX_SIZE=1000

# ----------------------------------------------------------------------------
# Redis Backend Settings (required when CACHE_BACKEND=redis)
# ----------------------------------------------------------------------------
# Uncomment and set these when using CACHE_BACKEND=redis:

# Redis connection URL
# Examples:
#   - Local: redis://localhost:6379/0
#   - With auth: redis://:password@localhost:6379/0
#   - TLS: rediss://localhost:6380/0
#   - Sentinel: redis+sentinel://sentinel1:26379,sentinel2:26379/myservice/0
# REDIS_URL=redis://localhost:6379/0

# Redis connection pool size
# REDIS_MAX_CONNECTIONS=10

# Redis socket timeout in seconds
# REDIS_SOCKET_TIMEOUT=5

# ----------------------------------------------------------------------------
# Toggle Cache Backend Examples
# ----------------------------------------------------------------------------
# To switch from memory to Redis:
#   1. Change CACHE_BACKEND=memory to CACHE_BACKEND=redis
#   2. Uncomment and set REDIS_URL=redis://your-redis-host:6379/0
#   3. Optionally tune REDIS_MAX_CONNECTIONS and REDIS_SOCKET_TIMEOUT
#   4. Restart the server
#
# Memory cache (default):
#   CACHE_BACKEND=memory
#   CACHE_MAX_SIZE=1000
#
# Redis cache (toggle on):
#   CACHE_BACKEND=redis
#   REDIS_URL=redis://localhost:6379/0
#   REDIS_MAX_CONNECTIONS=20
#   REDIS_SOCKET_TIMEOUT=5

# ============================================================================
# OBSERVABILITY & MONITORING
# ============================================================================

# Observability backend: simple | prometheus | datadog
# - simple: Structured logging + in-memory metrics (default)
# - prometheus: Prometheus metrics exporter (requires plugin)
# - datadog: Datadog integration (requires plugin)
OBSERVABILITY_BACKEND=simple

# Enable metrics collection (true|false)
ENABLE_METRICS=true

# Enable distributed tracing (true|false)
ENABLE_TRACING=false

# Metrics port (for prometheus exporter, if enabled)
METRICS_PORT=9090

# Prometheus metrics path
PROMETHEUS_PATH=/metrics

# ----------------------------------------------------------------------------
# Datadog Settings (required when OBSERVABILITY_BACKEND=datadog)
# ----------------------------------------------------------------------------
# Uncomment when using Datadog:
# DATADOG_API_KEY=your-datadog-api-key-here
# DATADOG_SITE=datadoghq.com

# ============================================================================
# OPTIMIZATION CONFIGURATION (Plugin-Provided)
# ============================================================================
# These settings require optimization plugins to be installed and enabled.

# Enable automatic optimization (true|false)
ENABLE_OPTIMIZATION=false

# Optimization strategy: balanced | cost | quality
OPTIMIZATION_MODE=balanced

# Minimum quality preservation ratio (0.0-1.0)
QUALITY_THRESHOLD=0.90

# Maximum optimization overhead in milliseconds
MAX_OVERHEAD_MS=100.0

# ============================================================================
# BUDGET ENFORCEMENT (Plugin-Provided)
# ============================================================================
# These settings require budget enforcement plugins to be installed.

# Enable budget limits (true|false)
ENABLE_BUDGET_ENFORCEMENT=false

# Daily budget limit in USD (optional)
# DAILY_BUDGET_LIMIT=5.0

# Monthly budget limit in USD (optional)
# MONTHLY_BUDGET_LIMIT=100.0

# Budget alert thresholds (comma-separated, 0.0-1.0)
BUDGET_ALERT_THRESHOLDS=0.5,0.75,0.9

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# Enable authentication (true|false)
# Note: MCP client-side authentication is recommended
ENABLE_AUTH=false

# API keys for plugin HTTP adapters (comma-separated)
# Only needed if plugins provide HTTP endpoints
# API_KEYS=key1,key2,key3

# Allowed host headers (comma-separated, * = all)
ALLOWED_HOSTS=*

# ============================================================================
# DEVELOPMENT & TESTING
# ============================================================================

# Debug mode (verbose output, may expose sensitive info)
DEBUG=false

# Enable hot reload for development
# WATCHFILES_ENABLED=true

# ============================================================================
# PRODUCTION RECOMMENDATIONS
# ============================================================================
# When deploying to production:
#
# 1. ENVIRONMENT=production
# 2. LOG_LEVEL=WARNING or ERROR
# 3. ENABLE_METRICS=true (for monitoring)
# 4. CACHE_BACKEND=redis (for multi-instance deployments)
# 5. REDIS_URL with TLS (rediss://) and authentication
# 6. Use secret management (Vault, cloud secrets) instead of .env
# 7. Set ALLOWED_HOSTS to specific domains (not *)
# 8. Enable ENABLE_AUTH if exposing HTTP endpoints via plugins
# 9. Configure OBSERVABILITY_BACKEND=datadog or prometheus
# 10. Set reasonable budget limits if using cost-sensitive plugins
#
# Production example:
#   ENVIRONMENT=production
#   LOG_LEVEL=WARNING
#   CACHE_BACKEND=redis
#   REDIS_URL=rediss://:secure-password@prod-redis.example.com:6380/0
#   REDIS_MAX_CONNECTIONS=50
#   OBSERVABILITY_BACKEND=datadog
#   DATADOG_API_KEY=<from-secret-manager>
#   ENABLE_METRICS=true
#   ENABLE_TRACING=true

# ============================================================================
# ADVANCED / OPTIONAL SETTINGS
# ============================================================================

# Custom configuration providers (experimental)
# CONFIG_PROVIDERS=env,file,vault
# CONFIG_FILE_PATH=./config/app.yaml
# CONFIG_VAULT_URL=https://vault.example.com

# Performance tuning (experimental)
# CONFIG_CACHE_ENABLED=true
# CONFIG_CACHE_TTL=300
# CONFIG_VALIDATION_STRICT=true

# ============================================================================
# NOTES
# ============================================================================
# - All settings are optional; defaults are defined in src/config/schemas.py
# - Settings are loaded in order: code defaults → .env → environment variables
# - Environment variables take precedence over .env file values
# - Never commit .env to source control (it's in .gitignore)
# - Use CACHE_BACKEND=memory for local development (no dependencies)
# - Use CACHE_BACKEND=redis for production (persistent, shared cache)
# - Redis client (redis-py v4+) is included in core dependencies
# - Plugins may introduce additional environment variables
# - See docs/SDD.md for the canonical configuration reference
